#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NeilsF1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FormulaOne")]
	public partial class FormulaOneDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCircuit(Circuit instance);
    partial void UpdateCircuit(Circuit instance);
    partial void DeleteCircuit(Circuit instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    partial void InsertDriver(Driver instance);
    partial void UpdateDriver(Driver instance);
    partial void DeleteDriver(Driver instance);
    partial void InsertRace(Race instance);
    partial void UpdateRace(Race instance);
    partial void DeleteRace(Race instance);
    partial void InsertRaceResult(RaceResult instance);
    partial void UpdateRaceResult(RaceResult instance);
    partial void DeleteRaceResult(RaceResult instance);
    #endregion
		
		public FormulaOneDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["FormulaOneConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FormulaOneDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FormulaOneDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FormulaOneDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FormulaOneDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Circuit> Circuits
		{
			get
			{
				return this.GetTable<Circuit>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
		
		public System.Data.Linq.Table<Driver> Drivers
		{
			get
			{
				return this.GetTable<Driver>();
			}
		}
		
		public System.Data.Linq.Table<Race> Races
		{
			get
			{
				return this.GetTable<Race>();
			}
		}
		
		public System.Data.Linq.Table<RaceResult> RaceResults
		{
			get
			{
				return this.GetTable<RaceResult>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Result")]
		public ISingleResult<ResultResult> Result([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> param1)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), param1);
			return ((ISingleResult<ResultResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Circuit")]
	public partial class Circuit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CircuitID;
		
		private string _CircuitName;
		
		private EntitySet<Race> _Races;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCircuitIDChanging(int value);
    partial void OnCircuitIDChanged();
    partial void OnCircuitNameChanging(string value);
    partial void OnCircuitNameChanged();
    #endregion
		
		public Circuit()
		{
			this._Races = new EntitySet<Race>(new Action<Race>(this.attach_Races), new Action<Race>(this.detach_Races));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CircuitID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CircuitID
		{
			get
			{
				return this._CircuitID;
			}
			set
			{
				if ((this._CircuitID != value))
				{
					this.OnCircuitIDChanging(value);
					this.SendPropertyChanging();
					this._CircuitID = value;
					this.SendPropertyChanged("CircuitID");
					this.OnCircuitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CircuitName", DbType="NVarChar(50)")]
		public string CircuitName
		{
			get
			{
				return this._CircuitName;
			}
			set
			{
				if ((this._CircuitName != value))
				{
					this.OnCircuitNameChanging(value);
					this.SendPropertyChanging();
					this._CircuitName = value;
					this.SendPropertyChanged("CircuitName");
					this.OnCircuitNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Circuit_Race", Storage="_Races", ThisKey="CircuitID", OtherKey="CircuitID")]
		public EntitySet<Race> Races
		{
			get
			{
				return this._Races;
			}
			set
			{
				this._Races.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Races(Race entity)
		{
			this.SendPropertyChanging();
			entity.Circuit = this;
		}
		
		private void detach_Races(Race entity)
		{
			this.SendPropertyChanging();
			entity.Circuit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Team")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TeamID;
		
		private string _TeamName;
		
		private string _Constructor;
		
		private string _Chassis;
		
		private string _Engine;
		
		private EntitySet<Driver> _Drivers;
		
		private EntitySet<RaceResult> _RaceResults;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamIDChanging(int value);
    partial void OnTeamIDChanged();
    partial void OnTeamNameChanging(string value);
    partial void OnTeamNameChanged();
    partial void OnConstructorChanging(string value);
    partial void OnConstructorChanged();
    partial void OnChassisChanging(string value);
    partial void OnChassisChanged();
    partial void OnEngineChanging(string value);
    partial void OnEngineChanged();
    #endregion
		
		public Team()
		{
			this._Drivers = new EntitySet<Driver>(new Action<Driver>(this.attach_Drivers), new Action<Driver>(this.detach_Drivers));
			this._RaceResults = new EntitySet<RaceResult>(new Action<RaceResult>(this.attach_RaceResults), new Action<RaceResult>(this.detach_RaceResults));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamName", DbType="VarChar(MAX)")]
		public string TeamName
		{
			get
			{
				return this._TeamName;
			}
			set
			{
				if ((this._TeamName != value))
				{
					this.OnTeamNameChanging(value);
					this.SendPropertyChanging();
					this._TeamName = value;
					this.SendPropertyChanged("TeamName");
					this.OnTeamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Constructor", DbType="VarChar(50)")]
		public string Constructor
		{
			get
			{
				return this._Constructor;
			}
			set
			{
				if ((this._Constructor != value))
				{
					this.OnConstructorChanging(value);
					this.SendPropertyChanging();
					this._Constructor = value;
					this.SendPropertyChanged("Constructor");
					this.OnConstructorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Chassis", DbType="VarChar(25)")]
		public string Chassis
		{
			get
			{
				return this._Chassis;
			}
			set
			{
				if ((this._Chassis != value))
				{
					this.OnChassisChanging(value);
					this.SendPropertyChanging();
					this._Chassis = value;
					this.SendPropertyChanged("Chassis");
					this.OnChassisChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Engine", DbType="VarChar(50)")]
		public string Engine
		{
			get
			{
				return this._Engine;
			}
			set
			{
				if ((this._Engine != value))
				{
					this.OnEngineChanging(value);
					this.SendPropertyChanging();
					this._Engine = value;
					this.SendPropertyChanged("Engine");
					this.OnEngineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Driver", Storage="_Drivers", ThisKey="TeamID", OtherKey="TeamID")]
		public EntitySet<Driver> Drivers
		{
			get
			{
				return this._Drivers;
			}
			set
			{
				this._Drivers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_RaceResult", Storage="_RaceResults", ThisKey="TeamID", OtherKey="TeamID")]
		public EntitySet<RaceResult> RaceResults
		{
			get
			{
				return this._RaceResults;
			}
			set
			{
				this._RaceResults.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Drivers(Driver entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Drivers(Driver entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
		
		private void attach_RaceResults(RaceResult entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_RaceResults(RaceResult entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Driver")]
	public partial class Driver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DriverID;
		
		private string _FirstName;
		
		private string _SecondName;
		
		private System.Nullable<int> _TeamID;
		
		private EntitySet<RaceResult> _RaceResults;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDriverIDChanging(int value);
    partial void OnDriverIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnSecondNameChanging(string value);
    partial void OnSecondNameChanged();
    partial void OnTeamIDChanging(System.Nullable<int> value);
    partial void OnTeamIDChanged();
    #endregion
		
		public Driver()
		{
			this._RaceResults = new EntitySet<RaceResult>(new Action<RaceResult>(this.attach_RaceResults), new Action<RaceResult>(this.detach_RaceResults));
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DriverID
		{
			get
			{
				return this._DriverID;
			}
			set
			{
				if ((this._DriverID != value))
				{
					this.OnDriverIDChanging(value);
					this.SendPropertyChanging();
					this._DriverID = value;
					this.SendPropertyChanged("DriverID");
					this.OnDriverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecondName", DbType="NVarChar(50)")]
		public string SecondName
		{
			get
			{
				return this._SecondName;
			}
			set
			{
				if ((this._SecondName != value))
				{
					this.OnSecondNameChanging(value);
					this.SendPropertyChanging();
					this._SecondName = value;
					this.SendPropertyChanged("SecondName");
					this.OnSecondNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int")]
		public System.Nullable<int> TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_RaceResult", Storage="_RaceResults", ThisKey="DriverID", OtherKey="DriverID")]
		public EntitySet<RaceResult> RaceResults
		{
			get
			{
				return this._RaceResults;
			}
			set
			{
				this._RaceResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Driver", Storage="_Team", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Drivers.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Drivers.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RaceResults(RaceResult entity)
		{
			this.SendPropertyChanging();
			entity.Driver = this;
		}
		
		private void detach_RaceResults(RaceResult entity)
		{
			this.SendPropertyChanging();
			entity.Driver = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Race")]
	public partial class Race : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RaceID;
		
		private string _RaceName;
		
		private System.Nullable<int> _CircuitID;
		
		private System.Nullable<System.DateTime> _RaceDate;
		
		private EntitySet<RaceResult> _RaceResults;
		
		private EntityRef<Circuit> _Circuit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRaceIDChanging(int value);
    partial void OnRaceIDChanged();
    partial void OnRaceNameChanging(string value);
    partial void OnRaceNameChanged();
    partial void OnCircuitIDChanging(System.Nullable<int> value);
    partial void OnCircuitIDChanged();
    partial void OnRaceDateChanging(System.Nullable<System.DateTime> value);
    partial void OnRaceDateChanged();
    #endregion
		
		public Race()
		{
			this._RaceResults = new EntitySet<RaceResult>(new Action<RaceResult>(this.attach_RaceResults), new Action<RaceResult>(this.detach_RaceResults));
			this._Circuit = default(EntityRef<Circuit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RaceID
		{
			get
			{
				return this._RaceID;
			}
			set
			{
				if ((this._RaceID != value))
				{
					this.OnRaceIDChanging(value);
					this.SendPropertyChanging();
					this._RaceID = value;
					this.SendPropertyChanged("RaceID");
					this.OnRaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceName", DbType="NVarChar(50)")]
		public string RaceName
		{
			get
			{
				return this._RaceName;
			}
			set
			{
				if ((this._RaceName != value))
				{
					this.OnRaceNameChanging(value);
					this.SendPropertyChanging();
					this._RaceName = value;
					this.SendPropertyChanged("RaceName");
					this.OnRaceNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CircuitID", DbType="Int")]
		public System.Nullable<int> CircuitID
		{
			get
			{
				return this._CircuitID;
			}
			set
			{
				if ((this._CircuitID != value))
				{
					if (this._Circuit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCircuitIDChanging(value);
					this.SendPropertyChanging();
					this._CircuitID = value;
					this.SendPropertyChanged("CircuitID");
					this.OnCircuitIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceDate", DbType="Date")]
		public System.Nullable<System.DateTime> RaceDate
		{
			get
			{
				return this._RaceDate;
			}
			set
			{
				if ((this._RaceDate != value))
				{
					this.OnRaceDateChanging(value);
					this.SendPropertyChanging();
					this._RaceDate = value;
					this.SendPropertyChanged("RaceDate");
					this.OnRaceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Race_RaceResult", Storage="_RaceResults", ThisKey="RaceID", OtherKey="RaceID")]
		public EntitySet<RaceResult> RaceResults
		{
			get
			{
				return this._RaceResults;
			}
			set
			{
				this._RaceResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Circuit_Race", Storage="_Circuit", ThisKey="CircuitID", OtherKey="CircuitID", IsForeignKey=true)]
		public Circuit Circuit
		{
			get
			{
				return this._Circuit.Entity;
			}
			set
			{
				Circuit previousValue = this._Circuit.Entity;
				if (((previousValue != value) 
							|| (this._Circuit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Circuit.Entity = null;
						previousValue.Races.Remove(this);
					}
					this._Circuit.Entity = value;
					if ((value != null))
					{
						value.Races.Add(this);
						this._CircuitID = value.CircuitID;
					}
					else
					{
						this._CircuitID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Circuit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RaceResults(RaceResult entity)
		{
			this.SendPropertyChanging();
			entity.Race = this;
		}
		
		private void detach_RaceResults(RaceResult entity)
		{
			this.SendPropertyChanging();
			entity.Race = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RaceResult")]
	public partial class RaceResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RaceResultID;
		
		private System.Nullable<int> _RaceID;
		
		private System.Nullable<int> _DriverID;
		
		private System.Nullable<int> _TeamID;
		
		private string _FinalPosition;
		
		private System.Nullable<System.TimeSpan> _RaceTime;
		
		private EntityRef<Driver> _Driver;
		
		private EntityRef<Race> _Race;
		
		private EntityRef<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRaceResultIDChanging(int value);
    partial void OnRaceResultIDChanged();
    partial void OnRaceIDChanging(System.Nullable<int> value);
    partial void OnRaceIDChanged();
    partial void OnDriverIDChanging(System.Nullable<int> value);
    partial void OnDriverIDChanged();
    partial void OnTeamIDChanging(System.Nullable<int> value);
    partial void OnTeamIDChanged();
    partial void OnFinalPositionChanging(string value);
    partial void OnFinalPositionChanged();
    partial void OnRaceTimeChanging(System.Nullable<System.TimeSpan> value);
    partial void OnRaceTimeChanged();
    #endregion
		
		public RaceResult()
		{
			this._Driver = default(EntityRef<Driver>);
			this._Race = default(EntityRef<Race>);
			this._Team = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceResultID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RaceResultID
		{
			get
			{
				return this._RaceResultID;
			}
			set
			{
				if ((this._RaceResultID != value))
				{
					this.OnRaceResultIDChanging(value);
					this.SendPropertyChanging();
					this._RaceResultID = value;
					this.SendPropertyChanged("RaceResultID");
					this.OnRaceResultIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceID", DbType="Int")]
		public System.Nullable<int> RaceID
		{
			get
			{
				return this._RaceID;
			}
			set
			{
				if ((this._RaceID != value))
				{
					if (this._Race.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRaceIDChanging(value);
					this.SendPropertyChanging();
					this._RaceID = value;
					this.SendPropertyChanged("RaceID");
					this.OnRaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DriverID", DbType="Int")]
		public System.Nullable<int> DriverID
		{
			get
			{
				return this._DriverID;
			}
			set
			{
				if ((this._DriverID != value))
				{
					if (this._Driver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDriverIDChanging(value);
					this.SendPropertyChanging();
					this._DriverID = value;
					this.SendPropertyChanged("DriverID");
					this.OnDriverIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamID", DbType="Int")]
		public System.Nullable<int> TeamID
		{
			get
			{
				return this._TeamID;
			}
			set
			{
				if ((this._TeamID != value))
				{
					if (this._Team.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamIDChanging(value);
					this.SendPropertyChanging();
					this._TeamID = value;
					this.SendPropertyChanged("TeamID");
					this.OnTeamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinalPosition", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string FinalPosition
		{
			get
			{
				return this._FinalPosition;
			}
			set
			{
				if ((this._FinalPosition != value))
				{
					this.OnFinalPositionChanging(value);
					this.SendPropertyChanging();
					this._FinalPosition = value;
					this.SendPropertyChanged("FinalPosition");
					this.OnFinalPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceTime", DbType="Time")]
		public System.Nullable<System.TimeSpan> RaceTime
		{
			get
			{
				return this._RaceTime;
			}
			set
			{
				if ((this._RaceTime != value))
				{
					this.OnRaceTimeChanging(value);
					this.SendPropertyChanging();
					this._RaceTime = value;
					this.SendPropertyChanged("RaceTime");
					this.OnRaceTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_RaceResult", Storage="_Driver", ThisKey="DriverID", OtherKey="DriverID", IsForeignKey=true)]
		public Driver Driver
		{
			get
			{
				return this._Driver.Entity;
			}
			set
			{
				Driver previousValue = this._Driver.Entity;
				if (((previousValue != value) 
							|| (this._Driver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Driver.Entity = null;
						previousValue.RaceResults.Remove(this);
					}
					this._Driver.Entity = value;
					if ((value != null))
					{
						value.RaceResults.Add(this);
						this._DriverID = value.DriverID;
					}
					else
					{
						this._DriverID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Driver");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Race_RaceResult", Storage="_Race", ThisKey="RaceID", OtherKey="RaceID", IsForeignKey=true)]
		public Race Race
		{
			get
			{
				return this._Race.Entity;
			}
			set
			{
				Race previousValue = this._Race.Entity;
				if (((previousValue != value) 
							|| (this._Race.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Race.Entity = null;
						previousValue.RaceResults.Remove(this);
					}
					this._Race.Entity = value;
					if ((value != null))
					{
						value.RaceResults.Add(this);
						this._RaceID = value.RaceID;
					}
					else
					{
						this._RaceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Race");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_RaceResult", Storage="_Team", ThisKey="TeamID", OtherKey="TeamID", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.RaceResults.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.RaceResults.Add(this);
						this._TeamID = value.TeamID;
					}
					else
					{
						this._TeamID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class ResultResult
	{
		
		private int _RaceResultID;
		
		private string _FinalPosition;
		
		private string _Expr1;
		
		private string _TeamName;
		
		public ResultResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RaceResultID", DbType="Int NOT NULL")]
		public int RaceResultID
		{
			get
			{
				return this._RaceResultID;
			}
			set
			{
				if ((this._RaceResultID != value))
				{
					this._RaceResultID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinalPosition", DbType="NChar(10)")]
		public string FinalPosition
		{
			get
			{
				return this._FinalPosition;
			}
			set
			{
				if ((this._FinalPosition != value))
				{
					this._FinalPosition = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expr1", DbType="NVarChar(101)")]
		public string Expr1
		{
			get
			{
				return this._Expr1;
			}
			set
			{
				if ((this._Expr1 != value))
				{
					this._Expr1 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeamName", DbType="NVarChar(50)")]
		public string TeamName
		{
			get
			{
				return this._TeamName;
			}
			set
			{
				if ((this._TeamName != value))
				{
					this._TeamName = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
